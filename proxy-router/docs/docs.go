// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/allowance/confirm": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Permission: agent_requests",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Confirm or Decline Token Allowance Request",
                "parameters": [
                    {
                        "description": "Confirm Token Allowance Request",
                        "name": "confirmAllowanceReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authapi.ConfirmAllowanceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authapi.AuthRes"
                        }
                    }
                }
            }
        },
        "/auth/allowance/requests": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Permission: agent_requests",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get All Token Allowance Requests",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authapi.AllowanceRequestsRes"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Permission: request_allowance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Request Allowance for Agent",
                "parameters": [
                    {
                        "description": "Request Allowance Request with token and amount",
                        "name": "requestAllowanceReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authapi.RequestAllowanceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authapi.AuthRes"
                        }
                    }
                }
            }
        },
        "/auth/allowance/revoke": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Permission: agent_requests",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Revoke Token Allowance for Agent",
                "parameters": [
                    {
                        "description": "Revoke Token Allowance Request",
                        "name": "revokeAllowanceReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authapi.RevokeAllowanceReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authapi.AuthRes"
                        }
                    }
                }
            }
        },
        "/auth/cookie/path": {
            "get": {
                "description": "Get the path to the cookie file",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get Path to Cookie File",
                "responses": {}
            }
        },
        "/auth/users": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Permission: agent_requests",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get Agent Users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authapi.AgentUsersRes"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Permission: add_user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Add/Update User in Proxy Conf",
                "parameters": [
                    {
                        "description": "Add User Request",
                        "name": "addUserReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authapi.AddUserReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authapi.AuthRes"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Permission: remove_user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Remove User from Proxy API",
                "parameters": [
                    {
                        "description": "Remove User Request",
                        "name": "removeUserReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authapi.RemoveUserReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authapi.AuthRes"
                        }
                    }
                }
            }
        },
        "/auth/users/confirm": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Permission: agent_requests",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Confirm or Decline Agent User",
                "parameters": [
                    {
                        "description": "Confirm Agent User Request",
                        "name": "confirmAgentUserReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authapi.ConfirmAgentReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authapi.AuthRes"
                        }
                    }
                }
            }
        },
        "/auth/users/request": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Request New User for Agent",
                "parameters": [
                    {
                        "description": "Request Agent User Request",
                        "name": "requestAgentUserReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authapi.RequestAgentUserReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authapi.AuthRes"
                        }
                    }
                }
            }
        },
        "/auth/users/{username}/txs": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Permission: agent_requests",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get Agent Transactions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authapi.AgentTxsRes"
                        }
                    }
                }
            }
        },
        "/blockchain/allowance": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get MOR allowance for spender",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get Allowance for MOR",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Spender address",
                        "name": "spender",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.AllowanceRes"
                        }
                    }
                }
            }
        },
        "/blockchain/approve": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Approve MOR allowance for spender",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Approve MOR allowance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Spender address",
                        "name": "spender",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Amount",
                        "name": "amount",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.TxRes"
                        }
                    }
                }
            }
        },
        "/blockchain/balance": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get ETH and MOR balance of the user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get ETH and MOR balance",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.TokenBalanceRes"
                        }
                    }
                }
            }
        },
        "/blockchain/bids": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bids"
                ],
                "summary": "Creates bid in blockchain",
                "parameters": [
                    {
                        "description": "Bid",
                        "name": "bid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CreateBidRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.BidRes"
                        }
                    }
                }
            }
        },
        "/blockchain/bids/{id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get bid from blockchain by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bids"
                ],
                "summary": "Get Bid by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bid ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.BidRes"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bids"
                ],
                "summary": "Delete Bid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bid ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.TxRes"
                        }
                    }
                }
            }
        },
        "/blockchain/bids/{id}/session": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Full flow to open a session by bidId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Open Session by bidId in blockchain",
                "parameters": [
                    {
                        "description": "Open session",
                        "name": "opensession",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.OpenSessionWithDurationRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bid ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.OpenSessionRes"
                        }
                    }
                }
            }
        },
        "/blockchain/latestBlock": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get latest block number from blockchain",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get Latest Block",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.BlockRes"
                        }
                    }
                }
            }
        },
        "/blockchain/models": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get models list from blokchain",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "models"
                ],
                "summary": "Get models list",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 10,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "example": 0,
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "example": "asc",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ModelsRes"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "If you provide ID in request it will be used as \"Base Id\" for generation of new model ID. So actual ID will be generated from it, and you will get it in response.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "models"
                ],
                "summary": "Creates model in blockchain",
                "parameters": [
                    {
                        "description": "Model",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CreateModelRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ModelRes"
                        }
                    }
                }
            }
        },
        "/blockchain/models/{id}": {
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "models"
                ],
                "summary": "Deregister Model",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.TxRes"
                        }
                    }
                }
            }
        },
        "/blockchain/models/{id}/bids": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get bids from blockchain by model agent",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bids"
                ],
                "summary": "Get Active Bids by Model",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ModelAgent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 10,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "example": 0,
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "example": "asc",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.BidsRes"
                        }
                    }
                }
            }
        },
        "/blockchain/models/{id}/bids/rated": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get rated bids from blockchain by model",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bids"
                ],
                "summary": "Get Rated Bids",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ScoredBidsRes"
                        }
                    }
                }
            }
        },
        "/blockchain/models/{id}/session": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Full flow to open a session by modelId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Open Session by ModelID in blockchain",
                "parameters": [
                    {
                        "description": "Open session",
                        "name": "opensession",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.OpenSessionWithFailover"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Model ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.OpenSessionRes"
                        }
                    }
                }
            }
        },
        "/blockchain/providers": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get providers list from blokchain",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "providers"
                ],
                "summary": "Get providers list",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 10,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "example": 0,
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "example": "asc",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ProvidersRes"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "providers"
                ],
                "summary": "Creates or updates provider in blockchain",
                "parameters": [
                    {
                        "description": "Provider",
                        "name": "provider",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.CreateProviderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.ProviderRes"
                        }
                    }
                }
            }
        },
        "/blockchain/providers/{id}": {
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "providers"
                ],
                "summary": "Deregister Provider",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.TxRes"
                        }
                    }
                }
            }
        },
        "/blockchain/providers/{id}/bids": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get bids from blockchain by provider",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bids"
                ],
                "summary": "Get Bids by Provider",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 10,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "example": 0,
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "example": "asc",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.BidsRes"
                        }
                    }
                }
            }
        },
        "/blockchain/providers/{id}/bids/active": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get bids from blockchain by provider",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bids"
                ],
                "summary": "Get Bids by Provider",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 10,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "example": 0,
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "example": "asc",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.BidsRes"
                        }
                    }
                }
            }
        },
        "/blockchain/send/eth": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Send Eth to address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Send Eth",
                "parameters": [
                    {
                        "description": "Send Eth",
                        "name": "sendeth",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.SendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.TxRes"
                        }
                    }
                }
            }
        },
        "/blockchain/send/mor": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Send Mor to address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Send Mor",
                "parameters": [
                    {
                        "description": "Send Mor",
                        "name": "sendmor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.SendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.TxRes"
                        }
                    }
                }
            }
        },
        "/blockchain/sessions": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Sends transaction in blockchain to open a session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Open Session with Provider in blockchain",
                "parameters": [
                    {
                        "description": "Open session",
                        "name": "opensession",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structs.OpenSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.OpenSessionRes"
                        }
                    }
                }
            }
        },
        "/blockchain/sessions/budget": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get todays budget from blockchain",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get Todays Budget",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.BudgetRes"
                        }
                    }
                }
            }
        },
        "/blockchain/sessions/provider": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get sessions from blockchain by provider",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get Sessions for Provider",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 10,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "example": 0,
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "example": "asc",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Provider address",
                        "name": "provider",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.SessionsRes"
                        }
                    }
                }
            }
        },
        "/blockchain/sessions/user": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get sessions from blockchain by user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get Sessions for User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User address",
                        "name": "user",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 10,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "example": 0,
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "example": "asc",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.SessionsRes"
                        }
                    }
                }
            }
        },
        "/blockchain/sessions/user/ids": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get sessions from blockchain by user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get Sessions for User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User address",
                        "name": "user",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 10,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "example": 0,
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "example": "asc",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.SessionsRes"
                        }
                    }
                }
            }
        },
        "/blockchain/sessions/{id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Returns session by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.SessionRes"
                        }
                    }
                }
            }
        },
        "/blockchain/sessions/{id}/close": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Sends transaction in blockchain to close a session",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Close Session with Provider",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.TxRes"
                        }
                    }
                }
            }
        },
        "/blockchain/token/supply": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get MOR token supply from blockchain",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get Token Supply",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.SupplyRes"
                        }
                    }
                }
            }
        },
        "/blockchain/transactions": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    },
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get MOR and ETH transactions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get Transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.TransactionsRes"
                        }
                    }
                }
            }
        },
        "/config": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Return the current config of proxy router",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Get Config",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/system.ConfigResponse"
                        }
                    }
                }
            }
        },
        "/config/ethNode": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Set the Eth Node URLs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Set Eth Node URLs",
                "parameters": [
                    {
                        "description": "URLs",
                        "name": "urls",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/system.SetEthNodeURLReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/system.StatusRes"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Delete the Eth Node URLs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Delete Eth Node URLs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/system.StatusRes"
                        }
                    }
                }
            }
        },
        "/docker/build": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker"
                ],
                "summary": "Build a Docker image",
                "parameters": [
                    {
                        "description": "Docker build request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proxyapi.DockerBuildReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.DockerBuildRes"
                        }
                    }
                }
            }
        },
        "/docker/build/stream": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "docker"
                ],
                "summary": "Build a Docker image with progress updates as SSE stream",
                "parameters": [
                    {
                        "description": "Docker build request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proxyapi.DockerBuildReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.DockerStreamBuildEvent"
                        }
                    }
                }
            }
        },
        "/docker/container/remove": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker"
                ],
                "summary": "Remove a Docker container",
                "parameters": [
                    {
                        "description": "Docker container remove request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proxyapi.DockerContainerActionReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.ResultResponse"
                        }
                    }
                }
            }
        },
        "/docker/container/start": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker"
                ],
                "summary": "Start a Docker container",
                "parameters": [
                    {
                        "description": "Docker start container request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proxyapi.DockerStartContainerReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.DockerStartContainerRes"
                        }
                    }
                }
            }
        },
        "/docker/container/stop": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker"
                ],
                "summary": "Stop a Docker container",
                "parameters": [
                    {
                        "description": "Docker container stop request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proxyapi.DockerContainerActionReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.ResultResponse"
                        }
                    }
                }
            }
        },
        "/docker/container/{id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker"
                ],
                "summary": "Get Docker container info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.DockerContainerInfoRes"
                        }
                    }
                }
            }
        },
        "/docker/container/{id}/logs": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "docker"
                ],
                "summary": "Get Docker container logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of lines to show from the end",
                        "name": "tail",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Follow log output",
                        "name": "follow",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Log output",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/docker/container/{id}/logs/stream": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "docker"
                ],
                "summary": "Stream Docker container logs as SSE",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of lines to show from the end",
                        "name": "tail",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Log output events",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/docker/containers": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker"
                ],
                "summary": "List Docker containers",
                "parameters": [
                    {
                        "description": "Docker list containers request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proxyapi.DockerListContainersReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.DockerListContainersRes"
                        }
                    }
                }
            }
        },
        "/docker/prune/containers": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker"
                ],
                "summary": "Prune stopped Docker containers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.DockerPruneRes"
                        }
                    }
                }
            }
        },
        "/docker/prune/images": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker"
                ],
                "summary": "Prune unused Docker images",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.DockerPruneRes"
                        }
                    }
                }
            }
        },
        "/docker/version": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docker"
                ],
                "summary": "Get Docker version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.DockerVersionRes"
                        }
                    }
                }
            }
        },
        "/files": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Returns opened files",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Get files",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/system.FD"
                            }
                        }
                    }
                }
            }
        },
        "/healthcheck": {
            "get": {
                "description": "do ping",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Healthcheck example",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/system.HealthCheckResponse"
                        }
                    }
                }
            }
        },
        "/ipfs/add": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ipfs"
                ],
                "summary": "Add a file to IPFS with metadata",
                "parameters": [
                    {
                        "description": "File Path and Metadata",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proxyapi.AddFileReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.AddIpfsFileRes"
                        }
                    }
                }
            }
        },
        "/ipfs/download/stream/{cidHash}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "ipfs"
                ],
                "summary": "Download a file from IPFS with progress updates as SSE stream",
                "parameters": [
                    {
                        "type": "string",
                        "description": "cidHash",
                        "name": "cidHash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Destination Path",
                        "name": "dest",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.DownloadProgressEvent"
                        }
                    }
                }
            }
        },
        "/ipfs/download/{cidHash}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ipfs"
                ],
                "summary": "Download a file from IPFS",
                "parameters": [
                    {
                        "type": "string",
                        "description": "cidHash",
                        "name": "cidHash",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Destination Path",
                        "name": "dest",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.ResultResponse"
                        }
                    }
                }
            }
        },
        "/ipfs/pin": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ipfs"
                ],
                "summary": "Get all pinned files metadata",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/proxyapi.PinnedFileRes"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ipfs"
                ],
                "summary": "Pin a file to IPFS",
                "parameters": [
                    {
                        "description": "cidHash",
                        "name": "cidHash",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proxyapi.CIDReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.ResultResponse"
                        }
                    }
                }
            }
        },
        "/ipfs/unpin": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ipfs"
                ],
                "summary": "Unpin a file from IPFS",
                "parameters": [
                    {
                        "description": "cidHash",
                        "name": "cidHash",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proxyapi.CIDReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.ResultResponse"
                        }
                    }
                }
            }
        },
        "/ipfs/version": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ipfs"
                ],
                "summary": "Get IPFS Version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.IpfsVersionRes"
                        }
                    }
                }
            }
        },
        "/proxy/provider/ping": {
            "post": {
                "description": "sends a ping to the provider on the RPC level",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Ping Provider",
                "parameters": [
                    {
                        "description": "Ping Request",
                        "name": "pingReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proxyapi.PingReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.PingRes"
                        }
                    }
                }
            }
        },
        "/proxy/sessions/initiate": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "sends a handshake to the provider",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Initiate Session with Provider",
                "parameters": [
                    {
                        "description": "Initiate Session",
                        "name": "initiateSession",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proxyapi.InitiateSessionReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/morrpcmesssage.SessionRes"
                        }
                    }
                }
            }
        },
        "/proxy/sessions/{id}/providerClaim": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Claim provider balance from session",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Claim Provider Balance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.TxRes"
                        }
                    }
                }
            }
        },
        "/proxy/sessions/{id}/providerClaimableBalance": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get provider claimable balance from session",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sessions"
                ],
                "summary": "Get Provider Claimable Balance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.BalanceRes"
                        }
                    }
                }
            }
        },
        "/v1/agents": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Get local agents",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aiengine.LocalAgent"
                            }
                        }
                    }
                }
            }
        },
        "/v1/agents/tools": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Get agent tools",
                "parameters": [
                    {
                        "type": "string",
                        "format": "hex32",
                        "description": "Session ID",
                        "name": "session_id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "format": "hex32",
                        "description": "Agent ID",
                        "name": "agent_id",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aiengine.AgentTool"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Call agent tool",
                "parameters": [
                    {
                        "type": "string",
                        "format": "hex32",
                        "description": "Session ID",
                        "name": "session_id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "format": "hex32",
                        "description": "Agent ID",
                        "name": "agent_id",
                        "in": "header"
                    },
                    {
                        "description": "Input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proxyapi.CallAgentToolReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/v1/chat/completions": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Send prompt to a local or remote model based on session id in header",
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Send Local Or Remote Prompt",
                "parameters": [
                    {
                        "type": "string",
                        "format": "hex32",
                        "description": "Session ID",
                        "name": "session_id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "format": "hex32",
                        "description": "Model ID",
                        "name": "model_id",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "format": "hex32",
                        "description": "Chat ID",
                        "name": "chat_id",
                        "in": "header"
                    },
                    {
                        "description": "Prompt",
                        "name": "prompt",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proxyapi.ChatCompletionRequestSwaggerExample"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/chats": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Get all chats stored in the system",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/genericchatstorage.Chat"
                            }
                        }
                    }
                }
            }
        },
        "/v1/chats/{id}": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Get chat by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/genericchatstorage.ChatHistory"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Update chat title by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Chat Title",
                        "name": "title",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/proxyapi.UpdateChatTitleReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.ResultResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chat"
                ],
                "summary": "Delete chat by id from storage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proxyapi.ResultResponse"
                        }
                    }
                }
            }
        },
        "/v1/models": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Get local models",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/aiengine.LocalModel"
                            }
                        }
                    }
                }
            }
        },
        "/wallet": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Get wallet address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Get Wallet",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/walletapi.WalletRes"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Remove wallet from proxy storage",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Remove wallet from proxy",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/walletapi.StatusRes"
                        }
                    }
                }
            }
        },
        "/wallet/mnemonic": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Setup wallet using mnemonic",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Setup wallet using mnemonic",
                "parameters": [
                    {
                        "description": "Mnemonic",
                        "name": "mnemonic",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/walletapi.SetupWalletMnemonicReqBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/walletapi.WalletRes"
                        }
                    }
                }
            }
        },
        "/wallet/privateKey": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Setup wallet with private key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Setup wallet with private key",
                "parameters": [
                    {
                        "description": "Private key",
                        "name": "privatekey",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/walletapi.SetupWalletPrKeyReqBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/walletapi.WalletRes"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "aiengine.AgentTool": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "inputSchema": {
                    "$ref": "#/definitions/aiengine.ToolInputSchema"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "aiengine.LocalAgent": {
            "type": "object",
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "capacityPolicy": {
                    "type": "string"
                },
                "command": {
                    "type": "string"
                },
                "concurrentSlots": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "aiengine.LocalModel": {
            "type": "object",
            "properties": {
                "apiType": {
                    "type": "string"
                },
                "apiUrl": {
                    "type": "string"
                },
                "capacityPolicy": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slots": {
                    "type": "integer"
                }
            }
        },
        "aiengine.ToolInputSchema": {
            "type": "object",
            "properties": {
                "properties": {
                    "type": "object",
                    "additionalProperties": true
                },
                "required": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "authapi.AddUserReq": {
            "type": "object",
            "required": [
                "password",
                "perms",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "perms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "authapi.AgentTxsRes": {
            "type": "object",
            "properties": {
                "nextCursor": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "txHashes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "authapi.AgentUser": {
            "type": "object",
            "properties": {
                "allowances": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/lib.BigInt"
                    }
                },
                "isConfirmed": {
                    "type": "boolean"
                },
                "perms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "authapi.AgentUsersRes": {
            "type": "object",
            "properties": {
                "agents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authapi.AgentUser"
                    }
                }
            }
        },
        "authapi.AllowanceRequest": {
            "type": "object",
            "properties": {
                "allowance": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "authapi.AllowanceRequestsRes": {
            "type": "object",
            "properties": {
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/authapi.AllowanceRequest"
                    }
                }
            }
        },
        "authapi.AuthRes": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "boolean"
                }
            }
        },
        "authapi.ConfirmAgentReq": {
            "type": "object",
            "required": [
                "confirm",
                "username"
            ],
            "properties": {
                "confirm": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "authapi.ConfirmAllowanceReq": {
            "type": "object",
            "required": [
                "confirm",
                "token",
                "username"
            ],
            "properties": {
                "confirm": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "authapi.RemoveUserReq": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "username": {
                    "type": "string"
                }
            }
        },
        "authapi.RequestAgentUserReq": {
            "type": "object",
            "required": [
                "allowances",
                "password",
                "perms",
                "username"
            ],
            "properties": {
                "allowances": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "password": {
                    "type": "string"
                },
                "perms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "authapi.RequestAllowanceReq": {
            "type": "object",
            "required": [
                "token",
                "username"
            ],
            "properties": {
                "allowance": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "authapi.RevokeAllowanceReq": {
            "type": "object",
            "required": [
                "token",
                "username"
            ],
            "properties": {
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "genericchatstorage.Chat": {
            "type": "object",
            "properties": {
                "chatId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "integer"
                },
                "isLocal": {
                    "type": "boolean"
                },
                "modelId": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "genericchatstorage.ChatCompletionMessage": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "name": {
                    "description": "This property isn't in the official documentation, but it's in\nthe documentation for the official library for python:\n- https://github.com/openai/openai-python/blob/main/chatml.md\n- https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb",
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "tool_call_id": {
                    "description": "For Role=tool prompts this should be set to the ID given in the assistant's prior request to call a tool.",
                    "type": "string"
                }
            }
        },
        "genericchatstorage.ChatCompletionResponseFormat": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                }
            }
        },
        "genericchatstorage.ChatHistory": {
            "type": "object",
            "properties": {
                "isLocal": {
                    "type": "boolean"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genericchatstorage.ChatMessage"
                    }
                },
                "modelId": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "genericchatstorage.ChatMessage": {
            "type": "object",
            "properties": {
                "isImageContent": {
                    "type": "boolean"
                },
                "isVideoRawContent": {
                    "type": "boolean"
                },
                "prompt": {
                    "$ref": "#/definitions/genericchatstorage.OpenAiCompletionRequest"
                },
                "promptAt": {
                    "type": "integer"
                },
                "response": {
                    "type": "string"
                },
                "responseAt": {
                    "type": "integer"
                }
            }
        },
        "genericchatstorage.OpenAiCompletionRequest": {
            "type": "object",
            "properties": {
                "frequency_penalty": {
                    "type": "number"
                },
                "function_call": {
                    "description": "Deprecated: use ToolChoice instead."
                },
                "logit_bias": {
                    "description": "LogitBias is must be a token id string (specified by their token ID in the tokenizer), not a word string.\nincorrect: ` + "`" + `\"logit_bias\":{\"You\": 6}` + "`" + `, correct: ` + "`" + `\"logit_bias\":{\"1639\": 6}` + "`" + `\nrefs: https://platform.openai.com/docs/api-reference/chat/create#chat/create-logit_bias",
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "logprobs": {
                    "description": "LogProbs indicates whether to return log probabilities of the output tokens or not.\nIf true, returns the log probabilities of each output token returned in the content of message.\nThis option is currently not available on the gpt-4-vision-preview model.",
                    "type": "boolean"
                },
                "max_tokens": {
                    "type": "integer"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genericchatstorage.ChatCompletionMessage"
                    }
                },
                "model": {
                    "type": "string"
                },
                "n": {
                    "type": "integer"
                },
                "presence_penalty": {
                    "type": "number"
                },
                "response_format": {
                    "$ref": "#/definitions/genericchatstorage.ChatCompletionResponseFormat"
                },
                "seed": {
                    "type": "integer"
                },
                "stop": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "stream": {
                    "type": "boolean"
                },
                "temperature": {
                    "type": "number"
                },
                "tool_choice": {
                    "description": "This can be either a string or an ToolChoice object."
                },
                "top_logprobs": {
                    "description": "TopLogProbs is an integer between 0 and 5 specifying the number of most likely tokens to return at each\ntoken position, each with an associated log probability.\nlogprobs must be set to true if this parameter is used.",
                    "type": "integer"
                },
                "top_p": {
                    "type": "number"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "lib.BigInt": {
            "type": "object",
            "properties": {
                "big.Int": {
                    "type": "string"
                }
            }
        },
        "morrpcmesssage.SessionRes": {
            "type": "object",
            "required": [
                "approval",
                "approvalSig",
                "message",
                "signature",
                "timestamp",
                "user"
            ],
            "properties": {
                "approval": {
                    "type": "string"
                },
                "approvalSig": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "proxyapi.AddFileReq": {
            "type": "object",
            "required": [
                "filePath"
            ],
            "properties": {
                "filePath": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "modelName": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "proxyapi.AddIpfsFileRes": {
            "type": "object",
            "required": [
                "fileCID",
                "fileCIDHash",
                "metadataCID",
                "metadataCIDHash"
            ],
            "properties": {
                "fileCID": {
                    "type": "string"
                },
                "fileCIDHash": {
                    "type": "string"
                },
                "metadataCID": {
                    "type": "string"
                },
                "metadataCIDHash": {
                    "type": "string"
                }
            }
        },
        "proxyapi.CIDReq": {
            "type": "object",
            "required": [
                "cidHash"
            ],
            "properties": {
                "cidHash": {
                    "type": "string"
                }
            }
        },
        "proxyapi.CallAgentToolReq": {
            "type": "object",
            "required": [
                "input",
                "toolName"
            ],
            "properties": {
                "input": {
                    "type": "object",
                    "additionalProperties": true
                },
                "toolName": {
                    "type": "string"
                }
            }
        },
        "proxyapi.ChatCompletionRequestSwaggerExample": {
            "type": "object",
            "properties": {
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "content": {
                                "type": "string",
                                "example": "tell me a joke"
                            },
                            "role": {
                                "type": "string",
                                "example": "user"
                            }
                        }
                    }
                },
                "stream": {
                    "type": "boolean"
                }
            }
        },
        "proxyapi.ContainerInfo": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "networkMode": {
                    "type": "string"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proxyapi.PortMapping"
                    }
                },
                "state": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "proxyapi.DockerBuildReq": {
            "type": "object",
            "required": [
                "contextPath",
                "dockerfile",
                "imageName"
            ],
            "properties": {
                "buildArgs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "contextPath": {
                    "type": "string"
                },
                "dockerfile": {
                    "type": "string"
                },
                "imageName": {
                    "type": "string"
                },
                "imageTag": {
                    "type": "string"
                }
            }
        },
        "proxyapi.DockerBuildRes": {
            "type": "object",
            "required": [
                "imageTag"
            ],
            "properties": {
                "imageTag": {
                    "type": "string"
                }
            }
        },
        "proxyapi.DockerContainerActionReq": {
            "type": "object",
            "required": [
                "containerId"
            ],
            "properties": {
                "containerId": {
                    "type": "string"
                },
                "force": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "integer"
                }
            }
        },
        "proxyapi.DockerContainerInfoRes": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "networkMode": {
                    "type": "string"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proxyapi.PortMapping"
                    }
                },
                "state": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "proxyapi.DockerListContainersReq": {
            "type": "object",
            "properties": {
                "all": {
                    "type": "boolean"
                },
                "filterLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "proxyapi.DockerListContainersRes": {
            "type": "object",
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proxyapi.ContainerInfo"
                    }
                }
            }
        },
        "proxyapi.DockerPruneRes": {
            "type": "object",
            "properties": {
                "spaceReclaimed": {
                    "type": "integer"
                }
            }
        },
        "proxyapi.DockerStartContainerReq": {
            "type": "object",
            "required": [
                "imageName"
            ],
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "env": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "imageName": {
                    "type": "string"
                },
                "networkMode": {
                    "type": "string"
                },
                "ports": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "volumes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "proxyapi.DockerStartContainerRes": {
            "type": "object",
            "required": [
                "containerId"
            ],
            "properties": {
                "containerId": {
                    "type": "string"
                }
            }
        },
        "proxyapi.DockerStreamBuildEvent": {
            "type": "object",
            "properties": {
                "current": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "errorDetails": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "percentage": {
                    "type": "number"
                },
                "progress": {
                    "type": "string"
                },
                "status": {
                    "description": "Status message",
                    "type": "string"
                },
                "stream": {
                    "type": "string"
                },
                "timeUpdated": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "proxyapi.DockerVersionRes": {
            "type": "object",
            "required": [
                "version"
            ],
            "properties": {
                "version": {
                    "type": "string"
                }
            }
        },
        "proxyapi.DownloadProgressEvent": {
            "type": "object",
            "properties": {
                "downloaded": {
                    "description": "Bytes downloaded so far",
                    "type": "integer"
                },
                "error": {
                    "description": "Error message, if status is \"error\"",
                    "type": "string"
                },
                "percentage": {
                    "description": "Percentage complete (0-100)",
                    "type": "number"
                },
                "status": {
                    "description": "\"downloading\", \"completed\", \"error\"",
                    "type": "string"
                },
                "timeUpdated": {
                    "description": "Timestamp of the update",
                    "type": "integer"
                },
                "total": {
                    "description": "Total bytes to download",
                    "type": "integer"
                }
            }
        },
        "proxyapi.InitiateSessionReq": {
            "type": "object",
            "required": [
                "bidId",
                "provider",
                "providerUrl",
                "spend",
                "user"
            ],
            "properties": {
                "bidId": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "providerUrl": {
                    "type": "string"
                },
                "spend": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "proxyapi.IpfsVersionRes": {
            "type": "object",
            "required": [
                "version"
            ],
            "properties": {
                "version": {
                    "type": "string"
                }
            }
        },
        "proxyapi.PingReq": {
            "type": "object",
            "required": [
                "providerAddr",
                "providerUrl"
            ],
            "properties": {
                "providerAddr": {
                    "type": "string"
                },
                "providerUrl": {
                    "type": "string"
                }
            }
        },
        "proxyapi.PingRes": {
            "type": "object",
            "properties": {
                "ping": {
                    "type": "integer"
                }
            }
        },
        "proxyapi.PinnedFileRes": {
            "type": "object",
            "required": [
                "fileCID",
                "fileCIDHash",
                "metadataCID",
                "metadataCIDHash"
            ],
            "properties": {
                "fileCID": {
                    "type": "string"
                },
                "fileCIDHash": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "fileSize": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "metadataCID": {
                    "type": "string"
                },
                "metadataCIDHash": {
                    "type": "string"
                },
                "modelName": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "proxyapi.PortMapping": {
            "type": "object",
            "properties": {
                "containerPort": {
                    "type": "string"
                },
                "hostIp": {
                    "type": "string"
                },
                "hostPort": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                }
            }
        },
        "proxyapi.ResultResponse": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "boolean"
                }
            }
        },
        "proxyapi.UpdateChatTitleReq": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "title": {
                    "type": "string"
                }
            }
        },
        "structs.AllowanceRes": {
            "type": "object",
            "properties": {
                "allowance": {
                    "type": "integer",
                    "example": 100000000
                }
            }
        },
        "structs.BalanceRes": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "string"
                }
            }
        },
        "structs.Bid": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "integer"
                },
                "deletedAt": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "modelAgentId": {
                    "type": "string"
                },
                "nonce": {
                    "type": "integer"
                },
                "pricePerSecond": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                }
            }
        },
        "structs.BidRes": {
            "type": "object",
            "properties": {
                "bid": {
                    "$ref": "#/definitions/structs.Bid"
                }
            }
        },
        "structs.BidsRes": {
            "type": "object",
            "properties": {
                "bids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structs.Bid"
                    }
                }
            }
        },
        "structs.BlockRes": {
            "type": "object",
            "properties": {
                "block": {
                    "type": "integer",
                    "example": 1234
                }
            }
        },
        "structs.BudgetRes": {
            "type": "object",
            "properties": {
                "budget": {
                    "type": "integer",
                    "example": 100000000
                }
            }
        },
        "structs.ContractInteraction": {
            "type": "object",
            "properties": {
                "contractAddress": {
                    "type": "string"
                },
                "contractName": {
                    "type": "string"
                },
                "decodedInput": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structs.InputEntry"
                    }
                },
                "methodName": {
                    "type": "string"
                }
            }
        },
        "structs.CreateBidRequest": {
            "type": "object",
            "required": [
                "modelID",
                "pricePerSecond"
            ],
            "properties": {
                "modelID": {
                    "type": "string"
                },
                "pricePerSecond": {
                    "type": "integer"
                }
            }
        },
        "structs.CreateModelRequest": {
            "type": "object",
            "required": [
                "fee",
                "ipfsID",
                "name",
                "stake",
                "tags"
            ],
            "properties": {
                "fee": {
                    "type": "integer",
                    "example": 123000000000
                },
                "id": {
                    "type": "string",
                    "example": "0x1234"
                },
                "ipfsID": {
                    "type": "string",
                    "example": "0x1234"
                },
                "name": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 1,
                    "example": "Llama 2.0"
                },
                "stake": {
                    "type": "integer",
                    "example": 123000000000
                },
                "tags": {
                    "type": "array",
                    "maxItems": 64,
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "structs.CreateProviderRequest": {
            "type": "object",
            "required": [
                "endpoint",
                "stake"
            ],
            "properties": {
                "endpoint": {
                    "type": "string",
                    "example": "mycoolmornode.domain.com:3989"
                },
                "stake": {
                    "type": "integer",
                    "example": 123000000000
                }
            }
        },
        "structs.InputEntry": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "structs.MappedTransaction": {
            "type": "object",
            "properties": {
                "contract": {
                    "$ref": "#/definitions/structs.ContractInteraction"
                },
                "from": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                },
                "transfers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structs.TokenTransfer"
                    }
                }
            }
        },
        "structs.Model": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "integer"
                },
                "fee": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "ipfsCID": {
                    "type": "string"
                },
                "isDeleted": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "stake": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "structs.ModelRes": {
            "type": "object",
            "properties": {
                "model": {
                    "$ref": "#/definitions/structs.Model"
                }
            }
        },
        "structs.ModelsRes": {
            "type": "object",
            "properties": {
                "models": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structs.Model"
                    }
                }
            }
        },
        "structs.OpenSessionRequest": {
            "type": "object",
            "required": [
                "approval",
                "approvalSig",
                "stake"
            ],
            "properties": {
                "approval": {
                    "type": "string",
                    "format": "hex",
                    "example": "0x1234"
                },
                "approvalSig": {
                    "type": "string",
                    "format": "hex",
                    "example": "0x1234"
                },
                "directPayment": {
                    "type": "boolean"
                },
                "stake": {
                    "type": "integer",
                    "example": 123000000000
                }
            }
        },
        "structs.OpenSessionRes": {
            "type": "object",
            "properties": {
                "sessionID": {
                    "type": "string",
                    "example": "0x1234"
                }
            }
        },
        "structs.OpenSessionWithDurationRequest": {
            "type": "object",
            "properties": {
                "sessionDuration": {
                    "type": "integer"
                }
            }
        },
        "structs.OpenSessionWithFailover": {
            "type": "object",
            "properties": {
                "directPayment": {
                    "type": "boolean"
                },
                "failover": {
                    "type": "boolean"
                },
                "sessionDuration": {
                    "type": "integer"
                }
            }
        },
        "structs.Provider": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "integer"
                },
                "endpoint": {
                    "type": "string"
                },
                "isDeleted": {
                    "type": "boolean"
                },
                "stake": {
                    "type": "integer"
                }
            }
        },
        "structs.ProviderRes": {
            "type": "object",
            "properties": {
                "provider": {
                    "$ref": "#/definitions/structs.Provider"
                }
            }
        },
        "structs.ProvidersRes": {
            "type": "object",
            "properties": {
                "providers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structs.Provider"
                    }
                }
            }
        },
        "structs.ScoredBid": {
            "type": "object",
            "properties": {
                "bid": {
                    "$ref": "#/definitions/structs.Bid"
                },
                "id": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                }
            }
        },
        "structs.ScoredBidsRes": {
            "type": "object",
            "properties": {
                "bids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structs.ScoredBid"
                    }
                }
            }
        },
        "structs.SendRequest": {
            "type": "object",
            "required": [
                "amount",
                "to"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "structs.Session": {
            "type": "object",
            "properties": {
                "bidID": {
                    "type": "string"
                },
                "closedAt": {
                    "type": "integer"
                },
                "closeoutReceipt": {
                    "type": "string"
                },
                "closeoutType": {
                    "type": "integer"
                },
                "endsAt": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "modelAgentId": {
                    "type": "string"
                },
                "openedAt": {
                    "type": "integer"
                },
                "pricePerSecond": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "providerWithdrawnAmount": {
                    "type": "integer"
                },
                "stake": {
                    "type": "integer"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "structs.SessionRes": {
            "type": "object",
            "properties": {
                "session": {
                    "$ref": "#/definitions/structs.Session"
                }
            }
        },
        "structs.SessionsRes": {
            "type": "object",
            "properties": {
                "sessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structs.Session"
                    }
                }
            }
        },
        "structs.SupplyRes": {
            "type": "object",
            "properties": {
                "supply": {
                    "type": "integer",
                    "example": 100000000
                }
            }
        },
        "structs.TokenBalanceRes": {
            "type": "object",
            "properties": {
                "eth": {
                    "type": "integer",
                    "example": 100000000
                },
                "mor": {
                    "type": "integer",
                    "example": 100000000
                }
            }
        },
        "structs.TokenTransfer": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                },
                "tokenAddress": {
                    "description": "nil for eth transfers",
                    "type": "string"
                },
                "tokenDecimals": {
                    "type": "integer"
                },
                "tokenIcon": {
                    "type": "string"
                },
                "tokenName": {
                    "type": "string"
                },
                "tokenSymbol": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "structs.TransactionsRes": {
            "type": "object",
            "properties": {
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structs.MappedTransaction"
                    }
                }
            }
        },
        "structs.TxRes": {
            "type": "object",
            "properties": {
                "tx": {
                    "type": "string",
                    "example": "0x1234"
                }
            }
        },
        "system.ConfigResponse": {
            "type": "object",
            "properties": {
                "commit": {
                    "type": "string"
                },
                "config": {},
                "derivedConfig": {},
                "version": {
                    "type": "string"
                }
            }
        },
        "system.FD": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "system.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                },
                "uptime": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "system.SetEthNodeURLReq": {
            "type": "object",
            "required": [
                "urls"
            ],
            "properties": {
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "system.StatusRes": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "walletapi.SetupWalletMnemonicReqBody": {
            "type": "object",
            "required": [
                "derivationPath",
                "mnemonic"
            ],
            "properties": {
                "derivationPath": {
                    "type": "string"
                },
                "mnemonic": {
                    "type": "string"
                }
            }
        },
        "walletapi.SetupWalletPrKeyReqBody": {
            "type": "object",
            "required": [
                "privateKey"
            ],
            "properties": {
                "privateKey": {
                    "type": "string"
                }
            }
        },
        "walletapi.StatusRes": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "walletapi.WalletRes": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "0x1234"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Morpheus Lumerin Node API",
	Description:      "API for Morpheus Lumerin Node",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
